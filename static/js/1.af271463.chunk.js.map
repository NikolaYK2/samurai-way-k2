{"version":3,"file":"static/js/1.af271463.chunk.js","mappings":"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","sources":["webpack://samurai-way-k2/./src/common/components/formTextArea/FormTextArea.module.css?7825","common/components/formTextArea/FormTextArea.tsx","common/hoc/RedirectContainer.tsx","webpack://samurai-way-k2/./src/features/2-main/content/ContentProfile.module.css?49ec","webpack://samurai-way-k2/./src/features/2-main/content/1-MyProfile/MyProfile.module.css?0bdd","webpack://samurai-way-k2/./src/features/2-main/content/1-MyProfile/MyProfileStatus.module.css?c18a","features/2-main/content/1-MyProfile/MyProfileSelectors.ts","features/2-main/content/1-MyProfile/MyProfileStatusHook.tsx","features/2-main/content/1-MyProfile/MyProfile.tsx","webpack://samurai-way-k2/./src/features/2-main/content/1-MyProfile/myPost/MyPost.module.css?a4d3","webpack://samurai-way-k2/./src/features/2-main/content/1-MyProfile/myPost/Post.module.css?23ad","features/2-main/content/1-MyProfile/myPost/myPost.selectors.tsx","features/2-main/content/1-MyProfile/myPost/Post.tsx","features/2-main/content/1-MyProfile/myPost/MyPost.tsx","features/2-main/content/1-MyProfile/myPost/MyPostContainer.tsx","features/2-main/content/ContentProfileContainer.tsx","common/selectors/WithRouter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormTextArea_form__++ufq\",\"error\":\"FormTextArea_error__BNSQL\",\"offError\":\"FormTextArea_offError__-BI44\"};","import React, {memo} from \"react\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport s from 'common/components/formTextArea/FormTextArea.module.css'\r\nimport {usersMessagesType} from \"features/redux/messagesPageReducer\";\r\nimport {Button} from \"common/components/button/Button\";\r\n\r\ntype FormTextareaType = {\r\n  nameBut?: string\r\n  messages: usersMessagesType[],\r\n  addMessages: (newMessageUsers: string) => void,\r\n}\r\nexport const FormTextarea = memo((props: FormTextareaType) => {\r\n  console.log('textarea')\r\n\r\n  const {register, handleSubmit, watch, formState: {errors}, reset} = useForm<FormTextareaType>();\r\n\r\n  const onSubmit: SubmitHandler<FormTextareaType> = data => {\r\n    console.log(data);\r\n    props.addMessages(String(watch('messages')));\r\n    reset();\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className={s.form}>\r\n            <textarea\r\n              {...register('messages', {required: 'Поле пустое'})}\r\n              placeholder={errors.messages ? errors.messages.message : 'Введите сообщение'}\r\n              className={errors.messages ? s.error : s.offError}\r\n            />\r\n      <Button name={props.nameBut!} disabled={false}/>\r\n    </form>\r\n  );\r\n});\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"app/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean,\r\n}\r\nconst mapStateToPropsRedirect = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.loginAuthorization.isAuth,\r\n  }\r\n}\r\n\r\nexport function RedirectContainer<T extends {}>(Component: ComponentType<T>) {//COmponentType из реакта импортируем\r\n\r\n  const RedirectComponent = (props: MapStatePropsType) => {\r\n    //isAuth нам не нужно кидать в компоненту, он нужен тут, нужно отделаить от props c помощью деструктизации\r\n    const {isAuth, ...restProps} = props;//Вытягиваем из props isAuth, а все остальное засовывваем в restProps\r\n\r\n    if (!isAuth) return <Navigate to={'/login'}/>\r\n    return <Component {...restProps as T}/>//as - воспринимай его как - T -\r\n  }\r\n\r\n  let ConnectedRedirectComponentContainer = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n\r\n  return ConnectedRedirectComponentContainer;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ContentProfile_content__e1iS3\"};","// extracted by mini-css-extract-plugin\nexport default {\"content__profile\":\"MyProfile_content__profile__Raojo\",\"data\":\"MyProfile_data__DGihs\"};","// extracted by mini-css-extract-plugin\nexport default {\"blockStatus\":\"MyProfileStatus_blockStatus__S5eeH\",\"input\":\"MyProfileStatus_input__hHvp1\",\"span\":\"MyProfileStatus_span__hu22B\",\"border\":\"MyProfileStatus_border__IXg5L\"};","import {AppStateType} from \"app/redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const statusSelector = (state:AppStateType)=>state.proFilePage.status\r\n\r\nconst profileSelect = (state:AppStateType)=>state.proFilePage.profile\r\nexport const optimizedProfileSelect = createSelector([profileSelect],(profile)=>{\r\n  return profile\r\n})\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './MyProfileStatus.module.css'\r\nimport {useAppDispatch, useAppSelector} from \"app/redux-store\";\r\nimport {updStatusThunkCreator} from \"features/redux/proFilePageReducer\";\r\nimport {statusSelector} from \"features/2-main/content/1-MyProfile/MyProfileSelectors\";\r\n\r\nexport const MyProfileStatusHook = () => {\r\n    console.log('status')\r\n    const status = useAppSelector(statusSelector)\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [editMode, setEditMode] = useState(true);\r\n    const [statusLocal, setStatusLocal] = useState(status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(true)\r\n        dispatch(updStatusThunkCreator(statusLocal))\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusLocal(e.currentTarget.value)\r\n    }\r\n\r\n    //При монтировании компоненты сетаем новые данные и подписываемся на обновления\r\n    useEffect(() => {\r\n        setStatusLocal(status)\r\n    }, [status]);\r\n\r\n    return (\r\n        <div className={s.blockStatus}>\r\n            {editMode ?\r\n                <span onDoubleClick={activateEditMode} className={s.span}>{status || 'no status'}</span>\r\n                :\r\n                <input autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange}\r\n                       value={statusLocal}\r\n                       placeholder={'status'}\r\n                ></input>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyProfile.module.css\";\r\nimport {Loading} from \"common/components/loading/Loading\";\r\nimport {MyProfileStatusHook} from \"features/2-main/content/1-MyProfile/MyProfileStatusHook\";\r\nimport {IconSvg} from \"common/components/iconSvg/IconSVG\";\r\nimport {useAppSelector} from \"app/redux-store\";\r\nimport {optimizedProfileSelect} from \"features/2-main/content/1-MyProfile/MyProfileSelectors\";\r\n\r\n\r\n// type ProfileType = {\r\n//   profile: ProfileUserType | null,\r\n//   status: string,\r\n//   updStatus: (status: string) => void,\r\n// }\r\n\r\nexport const Profile = () => {\r\n  console.log('весь проф')\r\n  const profile = useAppSelector(optimizedProfileSelect)\r\n\r\n  if (!profile) {\r\n    return <Loading/>;\r\n  }\r\n  return (\r\n    <div className={s.content__profile}>\r\n      <MyProfileStatusHook/>\r\n\r\n      <div className={s.data}>\r\n        <table>\r\n          <tbody>\r\n          <tr>\r\n            <td>Full name</td>\r\n            <td>{profile.fullName}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>AboutMe</td>\r\n            <td>{profile.aboutMe}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Contacts</td>\r\n            <td><a href={profile.contacts?.facebook}><IconSvg name={'faceBook'}/></a></td>\r\n            <td><a href={profile.contacts?.vk}><IconSvg name={'vk'}/></a></td>\r\n            <td><a href={profile.contacts?.github}><IconSvg name={'gitHub'}/></a></td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MyPost_container__clo-n\",\"content__myPost\":\"MyPost_content__myPost__815An\"};","// extracted by mini-css-extract-plugin\nexport default {\"containerPost\":\"Post_containerPost__R3E0Q\",\"post\":\"Post_post__I++A9\",\"content__profUsers\":\"Post_content__profUsers__zysyY\",\"img\":\"Post_img__MldoO\",\"postData\":\"Post_postData__0g+PD\",\"message\":\"Post_message__hjs3M\",\"like\":\"Post_like__v7Iy6\",\"delPost\":\"Post_delPost__xpE7l\",\"dataPostContainer\":\"Post_dataPostContainer__Yn5-n\",\"dataPost\":\"Post_dataPost__4VX6B\",\"psevdoElement\":\"Post_psevdoElement__fFc35\"};","import {AppStateType} from \"app/redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst postDataSelector = (state:AppStateType) =>state.proFilePage.postData\r\nexport const optimizedPostDataSelector = createSelector([postDataSelector],(postData)=>{\r\n  return postData\r\n})","import s from \"./Post.module.css\";\r\nimport React, {memo, useCallback} from \"react\";\r\nimport {useAppSelector} from \"app/redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deletePostAC, setLikeAC} from \"features/redux/proFilePageReducer\";\r\nimport {IconSvg} from \"common/components/iconSvg/IconSVG\";\r\nimport {optimizedPostDataSelector} from \"features/2-main/content/1-MyProfile/myPost/myPost.selectors\";\r\n\r\nconst day = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',];\r\nconst data = new Date().getDate()\r\nconst number = new Date().getFullYear()\r\nconst month = new Date().getMonth() + 1\r\nconst dayNumber = new Date().getDay()\r\n\r\nexport const Post = memo(() => {\r\n\r\n  const postData = useAppSelector(optimizedPostDataSelector)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleDeletePost = (postId: string) => {\r\n    dispatch(deletePostAC(postId))\r\n  }\r\n\r\n  const handleLike = useCallback((id: string, like: number) => {\r\n    dispatch(setLikeAC(id, like))\r\n  }, [postData])\r\n\r\n\r\n  const dayWeek = day[dayNumber - 1]\r\n  return (\r\n    <>\r\n      {postData.map(pD => {\r\n        return (\r\n          <div key={pD.id} className={s.containerPost}>\r\n            <div className={s.post}>\r\n              <div className={s.content__profUsers}>\r\n                <div className={s.img}>\r\n                  <img\r\n                    src=\"https://avatars.mds.yandex.net/i?id=0eaa142d7202ac9bbd26ac279e7ae159_l-4898876-images-thumbs&n=27&h=384&w=480\"\r\n                    alt=\"\"/>\r\n                </div>\r\n                <div className={s.postData}>\r\n                  <div className={s.message}>{pD.sms}</div>\r\n                </div>\r\n              </div>\r\n              <div className={s.like}>\r\n                <span onClick={() => handleLike(pD.id, pD.like)}><IconSvg name={'like'}/>{pD.like}</span>\r\n\r\n                <div className={s.delPost} onClick={() => handleDeletePost(pD.id)}><IconSvg name={'delete'}/></div>\r\n              </div>\r\n            </div>\r\n            <div className={s.dataPostContainer}>\r\n              <div className={s.dataPost}>\r\n                <div>{dayWeek}</div>\r\n                <div>{data}/{month}/{number}</div>\r\n              </div>\r\n              <div className={s.psevdoElement}></div>\r\n            </div>\r\n          </div>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n})\r\n","import s from \"./MyPost.module.css\";\r\nimport React, {memo} from \"react\";\r\nimport {MyPostType} from \"features/2-main/content/1-MyProfile/myPost/MyPostContainer\";\r\nimport {FormTextarea} from \"common/components/formTextArea/FormTextArea\";\r\nimport {Post} from \"features/2-main/content/1-MyProfile/myPost/Post\";\r\n\r\nexport const MyPost = memo((props: MyPostType) => {\r\n\r\n  console.log('my post')\r\n  //POSTS =====================================================================================\r\n\r\n  return (\r\n    <div className={s.continer}>\r\n      <div className={s.content__myPost}>\r\n        <FormTextarea nameBut={'send'} messages={props.postData} addMessages={props.addPost}/>\r\n      </div>\r\n        <Post/>\r\n    </div>\r\n  );\r\n})\r\n//--------------------------------------------------------------------------------------\r\n","import {connect} from \"react-redux\";\r\nimport {addPostAC, deletePostAC, postDataType} from \"features/redux/proFilePageReducer\";\r\nimport {AppStateType} from \"app/redux-store\";\r\nimport {MyPost} from \"features/2-main/content/1-MyProfile/myPost/MyPost\";\r\n\r\n//ФУнкции которые возвращают объект. Создает контейнерную компоненту и\r\n// внутри рендерит презантационную компаненту и внутрь презан. в качестве props передает те св-в\r\n// что сидят в двух обьектах, это значит что в MyPost будет сидеть в пропсах и 1 и 2 функция\r\n\r\ntype MapStatePropsType = {\r\n    postData: postDataType[],\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost:(postMessage: string)=>void,\r\n    deletePost:(postId:string)=>void\r\n}\r\n\r\nexport type MyPostType = MapStatePropsType & MapDispatchPropsType;\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {//название функции обозначает замапить state на пропсы\r\n    return {\r\n        postData: state.proFilePage.postData,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    addPost: addPostAC,\r\n    deletePost: deletePostAC,\r\n})(MyPost);//Вызываем ее два раза и во второй раз вызываем то ту фукнцию что она вернула в первой\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(MyPost);//Вызываем ее два раза и во второй раз вызываем то ту фукнцию что она вернула в первой\r\n//С библиотекой connect можно забыть про store","import React, {useEffect} from \"react\";\r\nimport s from \"./ContentProfile.module.css\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {Profile} from \"features/2-main/content/1-MyProfile/MyProfile\";\r\nimport MyPostContainer from \"features/2-main/content/1-MyProfile/myPost/MyPostContainer\";\r\nimport {withRouter, WithRouterProps} from \"common/selectors/WithRouter\";\r\nimport {\r\n    deletePostAC,\r\n    getUserProfileThunkCreator, postDataType,\r\n    ProfileUserType,\r\n    setStatusThunkCreator,\r\n    updStatusThunkCreator\r\n} from \"features/redux/proFilePageReducer\";\r\nimport {AppStateType} from \"app/redux-store\";\r\nimport {RedirectContainer} from \"common/hoc/RedirectContainer\";\r\n\r\nconst ContentProfileContainer = (props: ProfileTypeProps) => {\r\n\r\n\r\n    useEffect(() => {\r\n        let userId: number | null = props.params.userId;\r\n        if (!userId) {\r\n            userId = props.userId;\r\n        }\r\n        props.getUserProfile(userId);\r\n        props.setStatus(userId);\r\n    }, [])\r\n\r\n    return (\r\n        <section className={s.content}>\r\n            <Profile />\r\n            {/*<Profile {...props}*/}\r\n            {/*         profile={props.profile}*/}\r\n            {/*         status={props.status}*/}\r\n            {/*         updStatus={props.updStatus}/>*/}\r\n            <MyPostContainer/>\r\n        </section>\r\n    );\r\n\r\n}\r\n\r\ntype ProfileTypeProps = MapStateToPropsType & MapDispatchPropsType & WithRouterProps;\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileUserType | null,\r\n    postData: postDataType[]\r\n    isAuth?: boolean,\r\n    status: string,\r\n    userId: number | null,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number | null) => void,\r\n    setStatus: (userId: number | null) => void,\r\n    updStatus: (status: string) => void,\r\n    deletePost: (postId: string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.proFilePage.profile,\r\n        status: state.proFilePage.status,\r\n        userId: state.loginAuthorization.id,\r\n        isAuth: state.loginAuthorization.isAuth,\r\n        postData: state.proFilePage.postData\r\n        // isAuth: state.loginAuthorization.isAuth,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileThunkCreator,\r\n        setStatus: setStatusThunkCreator,\r\n        updStatus: updStatusThunkCreator,\r\n        deletePost: deletePostAC\r\n    }),\r\n    withRouter,\r\n    RedirectContainer,\r\n)(ContentProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n","import {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport interface WithRouterProps {\r\n    location: ReturnType<typeof useLocation>;\r\n    params: Record<string, number>;\r\n    navigate: ReturnType<typeof useNavigate>;\r\n}\r\n\r\nexport const withRouter = <Props extends WithRouterProps>(\r\n    Component: React.ComponentType<Props>\r\n) => {\r\n    return (props: Omit<Props, keyof WithRouterProps>) => {\r\n        const location = useLocation();\r\n        const params = useParams();\r\n        const navigate = useNavigate();\r\n\r\n        return (\r\n            <Component\r\n                {...(props as Props)}\r\n                location={location}\r\n                params={params}\r\n                navigate={navigate}\r\n            />\r\n        );\r\n    };\r\n};"],"names":["FormTextarea","memo","props","console","log","_useForm","useForm","register","handleSubmit","watch","errors","formState","reset","_jsxs","onSubmit","data","addMessages","String","className","s","children","_jsx","_objectSpread","required","placeholder","messages","message","Button","name","nameBut","disabled","mapStateToPropsRedirect","state","isAuth","loginAuthorization","RedirectContainer","Component","connect","restProps","_objectWithoutProperties","_excluded","Navigate","to","statusSelector","proFilePage","status","optimizedProfileSelect","createSelector","profile","MyProfileStatusHook","useAppSelector","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","statusLocal","setStatusLocal","useEffect","onDoubleClick","autoFocus","onBlur","updStatusThunkCreator","onChange","e","currentTarget","value","Profile","_profile$contacts","_profile$contacts2","_profile$contacts3","fullName","aboutMe","href","contacts","facebook","IconSvg","vk","github","Loading","optimizedPostDataSelector","postData","day","Date","getDate","number","getFullYear","month","getMonth","dayNumber","getDay","Post","useDispatch","handleLike","useCallback","id","like","setLikeAC","dayWeek","_Fragment","map","pD","src","alt","sms","onClick","postId","deletePostAC","MyPost","continer","content__myPost","addPost","addPostAC","deletePost","compose","userId","getUserProfile","getUserProfileThunkCreator","setStatus","setStatusThunkCreator","updStatus","location","useLocation","params","useParams","navigate","useNavigate","MyPostContainer"],"sourceRoot":""}