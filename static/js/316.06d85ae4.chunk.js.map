{"version":3,"file":"static/js/316.06d85ae4.chunk.js","mappings":"uLACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAAiG,+B,mBCUpFA,GAAeC,EAAAA,EAAAA,OAAK,SAACC,GAChCC,QAAQC,IAAI,YAEZ,IAAAC,GAAoEC,EAAAA,EAAAA,MAA7DC,EAAQF,EAARE,SAAUC,EAAYH,EAAZG,aAAcC,EAAKJ,EAALI,MAAmBC,EAAML,EAAlBM,UAAYD,OAASE,EAAKP,EAALO,MAQ3D,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAAUN,GAPgC,SAAAO,GAChDZ,QAAQC,IAAIW,GACZb,EAAMc,YAAYC,OAAOR,EAAM,cAC/BG,GACF,IAG0CM,UAAWC,EAAOC,SAAA,EAClDC,EAAAA,EAAAA,KAAA,YAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMf,EAAS,WAAY,CAACgB,SAAU,mEAAe,IACnDC,YAAad,EAAOe,SAAWf,EAAOe,SAASC,QAAU,oGACzDR,UAAWR,EAAOe,SAAWN,EAAUA,MAE/CE,EAAAA,EAAAA,KAACM,EAAAA,EAAM,CAACC,KAAM1B,EAAM2B,QAAUC,UAAU,MAG9C,G,kICvBMC,EAA0B,SAACC,GAC/B,MAAO,CACLC,OAAQD,EAAME,mBAAmBD,OAErC,EAEO,SAASE,EAAgCC,GAY9C,OAF0CC,EAAAA,EAAAA,IAAQN,EAARM,EARhB,SAACnC,GAEzB,IAAO+B,EAAwB/B,EAAxB+B,OAAWK,GAASC,EAAAA,EAAAA,GAAIrC,EAAKsC,GAEpC,OAAKP,GACEZ,EAAAA,EAAAA,KAACe,GAASd,EAAAA,EAAAA,GAAA,GAAKgB,KADFjB,EAAAA,EAAAA,KAACoB,EAAAA,GAAQ,CAACC,GAAI,UAEpC,GAKF,C,gFC3BA,EAA0B,gCCA1B,EAAiC,8BAAjC,EAAuE,qBAAvE,EAAqG,sBAArG,EAAkI,oBAAlI,EAAsK,6B,4BCIzJC,EAAQ,WACnB,OACEtB,EAAAA,EAAAA,KAAA,OAAKH,UAAS,GAAA0B,OAAKzB,EAAgB,IAAI,gBAAiBC,SACrDyB,EAAAA,EAAMC,WAAWC,aAAaC,MAAMC,KAAI,SAACC,GACxC,OACE7B,EAAAA,EAAAA,KAAA,OAAgBH,UAAWC,EAAQC,UACjCP,EAAAA,EAAAA,MAACsC,EAAAA,EAAW,CAACT,GAAIQ,EAAEE,KAAMlC,UAAW,SAAAmC,GAAU,OAAAA,EAARC,SAAyBnC,EAAWA,CAAM,EAACC,SAAA,EAC/EC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAgBC,UAACC,EAAAA,EAAAA,KAAA,OAAKkC,IAAKL,EAAEM,OAAQC,IAAI,QACzDpC,EAAAA,EAAAA,KAAA,QAAAD,SAAO8B,EAAEtB,QACTP,EAAAA,EAAAA,KAAA,eAJM6B,EAAEQ,GAQhB,KAGN,E,uCCpBA,EAA4B,gCAA5B,EAAgF,wCAAhF,EAAyI,qC,UCkCzI,GAAeC,EAAAA,EAAAA,KAA6BtB,EAAAA,EAAAA,KAfpB,SAACL,GACrB,MAAO,CACH4B,cAAe5B,EAAMe,aAAaa,cAE1C,IAE2B,SAACC,GACxB,MAAO,CACHC,gBAAiB,SAACC,GACdF,GAASG,EAAAA,EAAAA,GAAkBD,GAC/B,EAER,IAG0F5B,EAAAA,EAA1F,EC9B4B,SAACjC,GACzB,OACEW,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAYC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKH,UAAS,GAAA0B,OAAKzB,EAAmB,IAAI,gBAAiBC,SACxDlB,EAAM0D,cAAcX,KAAI,SAAAgB,GACvB,OACE5C,EAAAA,EAAAA,KAAA,OAAiBH,UAAWC,EAAiBC,UAC3CC,EAAAA,EAAAA,KAAA,OAAAD,SAAM6C,EAAGC,OADDD,EAAGP,GAIjB,OAEFrC,EAAAA,EAAAA,KAACrB,EAAAA,EAAY,CAACyB,SAAUvB,EAAM0D,cAAe5C,YAAad,EAAM4D,gBAAiBjC,QAAS,WAGlG,ICLA,EATqD,WAEnD,OACEhB,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAUC,SAAA,EACxBC,EAAAA,EAAAA,KAACsB,EAAK,KACNtB,EAAAA,EAAAA,KAAC8C,EAAqB,MAG5B,C","sources":["webpack://samurai-way-k2/./src/common/components/formTextArea/FormTextArea.module.css?7825","common/components/formTextArea/FormTextArea.tsx","common/hoc/RedirectContainer.tsx","webpack://samurai-way-k2/./src/features/2-main/content/2-dialogs/DialogsMessage.module.css?605a","webpack://samurai-way-k2/./src/features/2-main/content/2-dialogs/users/Users.module.css?81a3","features/2-main/content/2-dialogs/users/Users.tsx","webpack://samurai-way-k2/./src/features/2-main/content/2-dialogs/messageUsers/MessageUsers.module.css?4073","features/2-main/content/2-dialogs/messageUsers/MessageUsersContainer.tsx","features/2-main/content/2-dialogs/messageUsers/MessageUsers.tsx","features/2-main/content/2-dialogs/DialogsMessage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormTextArea_form__++ufq\",\"error\":\"FormTextArea_error__BNSQL\",\"offError\":\"FormTextArea_offError__-BI44\"};","import React, {memo} from \"react\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport s from 'common/components/formTextArea/FormTextArea.module.css'\r\nimport {usersMessagesType} from \"features/redux/messagesPageReducer\";\r\nimport {Button} from \"common/components/button/Button\";\r\n\r\ntype FormTextareaType = {\r\n  nameBut?: string\r\n  messages: usersMessagesType[],\r\n  addMessages: (newMessageUsers: string) => void,\r\n}\r\nexport const FormTextarea = memo((props: FormTextareaType) => {\r\n  console.log('textarea')\r\n\r\n  const {register, handleSubmit, watch, formState: {errors}, reset} = useForm<FormTextareaType>();\r\n\r\n  const onSubmit: SubmitHandler<FormTextareaType> = data => {\r\n    console.log(data);\r\n    props.addMessages(String(watch('messages')));\r\n    reset();\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className={s.form}>\r\n            <textarea\r\n              {...register('messages', {required: 'Поле пустое'})}\r\n              placeholder={errors.messages ? errors.messages.message : 'Введите сообщение'}\r\n              className={errors.messages ? s.error : s.offError}\r\n            />\r\n      <Button name={props.nameBut!} disabled={false}/>\r\n    </form>\r\n  );\r\n});\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"app/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean,\r\n}\r\nconst mapStateToPropsRedirect = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.loginAuthorization.isAuth,\r\n  }\r\n}\r\n\r\nexport function RedirectContainer<T extends {}>(Component: ComponentType<T>) {//COmponentType из реакта импортируем\r\n\r\n  const RedirectComponent = (props: MapStatePropsType) => {\r\n    //isAuth нам не нужно кидать в компоненту, он нужен тут, нужно отделаить от props c помощью деструктизации\r\n    const {isAuth, ...restProps} = props;//Вытягиваем из props isAuth, а все остальное засовывваем в restProps\r\n\r\n    if (!isAuth) return <Navigate to={'/login'}/>\r\n    return <Component {...restProps as T}/>//as - воспринимай его как - T -\r\n  }\r\n\r\n  let ConnectedRedirectComponentContainer = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n\r\n  return ConnectedRedirectComponentContainer;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogsMessage_dialogs__UI97r\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__users\":\"Users_dialogs__users__IpDMB\",\"users\":\"Users_users__dEEZb\",\"active\":\"Users_active__xdL9l\",\"user\":\"Users_user__doXkS\",\"users__avatar\":\"Users_users__avatar__iTur2\"};","import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport {store} from \"app/redux-store\";\r\nimport {MemoNavLink} from \"common/utills/MemoNavLink\";\r\n\r\nexport const Users = () => {\r\n  return (\r\n    <div className={`${s.dialogs__users} ${'customScroll'}`}>\r\n      {store.getState().messagesPage.users.map((u) => {\r\n        return (\r\n          <div key={u.id} className={s.users}>\r\n            <MemoNavLink to={u.link} className={({isActive}) => isActive ? s.active : s.user}>\r\n              <div className={s.users__avatar}><img src={u.avatar} alt=\"\"/></div>\r\n              <span>{u.name}</span>\r\n              <span>{}</span>\r\n            </MemoNavLink>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageUsers_container__5Wjg0\",\"dialogs__messages\":\"MessageUsers_dialogs__messages__bddMz\",\"dialogs__users\":\"MessageUsers_dialogs__users__WFt+X\"};","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {addMessageUsersAC, usersMessagesType} from \"features/redux/messagesPageReducer\";\r\nimport {AppStateType} from \"app/redux-store\";\r\nimport {RedirectContainer} from \"common/hoc/RedirectContainer\";\r\nimport {MessageUsers} from \"features/2-main/content/2-dialogs/messageUsers/MessageUsers\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    usersMessages: usersMessagesType[],\r\n    isAuth?: boolean,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessageUsers: (newMessageUsers: string) => void,\r\n}\r\n\r\nexport type MessageUsersType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        usersMessages: state.messagesPage.usersMessages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessageUsers: (newMessageUsers: string) => {\r\n            dispatch(addMessageUsersAC(newMessageUsers));\r\n        },\r\n    }\r\n}\r\n\r\n//RedirectContaienr =========================================================\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), RedirectContainer//затем возьми результат и закинь в connect\r\n)(MessageUsers);//FN compose автомтаически закинет MessageUsers в RedirectContainer\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./MessageUsers.module.css\";\r\nimport {MessageUsersType} from \"features/2-main/content/2-dialogs/messageUsers/MessageUsersContainer\";\r\nimport {FormTextarea} from \"common/components/formTextArea/FormTextArea\";\r\n\r\nexport const MessageUsers = (props: MessageUsersType) => {\r\n    return (\r\n      <div className={s.container}>\r\n        <div className={`${s.dialogs__messages} ${'customScroll'}`}>\r\n          {props.usersMessages.map(uM => {\r\n            return (\r\n              <div key={uM.id} className={s.dialogs__users}>\r\n                <div>{uM.sms}</div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <FormTextarea messages={props.usersMessages} addMessages={props.addMessageUsers} nameBut={'Send'}/>\r\n      </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./DialogsMessage.module.css\";\r\nimport {Users} from \"features/2-main/content/2-dialogs/users/Users\";\r\nimport MessageUsersContainer from \"features/2-main/content/2-dialogs/messageUsers/MessageUsersContainer\";\r\n\r\ntype DialogsMessageType = {}\r\nconst DialogsMessage: React.FC<DialogsMessageType> = () => {\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <Users/>\r\n      <MessageUsersContainer/>\r\n    </div>\r\n  );\r\n}\r\nexport default DialogsMessage"],"names":["FormTextarea","memo","props","console","log","_useForm","useForm","register","handleSubmit","watch","errors","formState","reset","_jsxs","onSubmit","data","addMessages","String","className","s","children","_jsx","_objectSpread","required","placeholder","messages","message","Button","name","nameBut","disabled","mapStateToPropsRedirect","state","isAuth","loginAuthorization","RedirectContainer","Component","connect","restProps","_objectWithoutProperties","_excluded","Navigate","to","Users","concat","store","getState","messagesPage","users","map","u","MemoNavLink","link","_ref","isActive","src","avatar","alt","id","compose","usersMessages","dispatch","addMessageUsers","newMessageUsers","addMessageUsersAC","uM","sms","MessageUsersContainer"],"sourceRoot":""}